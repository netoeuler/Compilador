Package compilador;
 
Helpers     
    charmin = ['a' .. 'z']+;
    charmai = ['A' .. 'Z']+;
    char = [['a'..'z'] + ['A'..'Z']];
    digito = ['0' .. '9']+;
    qualquer_char = [0x0 .. 0xffff];
    
    hunderscore = '_';
    hponto = '.';
    
    cr = 13 ;
    lf = 10 ;
    tab = 9 ;
    blank = ' ';
    hchar_ignored = cr|lf|blank|tab|'\n';
    nao_cr_lf = [qualquer_char - [13 + 10]];
    nao_estrela = [qualquer_char - '*'];
    nao_estrela_barra = [nao_estrela - '/'];
    hstring = ''' [nao_cr_lf - ''']+ ''';    
 
Tokens
    comentario_linha = '//' [qualquer_char - 10]* hchar_ignored*;
    comentario_bloco = '/*' nao_estrela* '*'+ (nao_estrela_barra nao_estrela* '*'+)* '/';
    
    underscore = hunderscore;
    numero_real = digito? ',' digito+;
    numero_inteiro = digito+;
            
    e = 'e';
    ou = 'ou';
    xor = 'xor';
    nao = 'nao';
    
    mais = '+';
    menos = '-';
    divisao = '/';
    mult = '*';    
    
    menor = '<';
    menor_igual = '<=';
    maior = '>';
    maior_igual = '>=';
    
    seta = '<-';
    igual_igual = '==';
    diferente = '<>';
    igual = '=';    
 
    ponto_e_virgula = ';';
    virgula = ',';
    abre_paren = '(' ;
    fecha_paren = ')' ;
    abre_colchete = '[' ;
    fecha_colchete = ']' ;
    abre_chave = '{' ;
    fecha_chave = '}' ;
    abre_coment = '/*' ;
    fecha_coment = '*/' ;
    ponto = '.';
    dois_pontos = ':';
    
    leia = 'leia';
    escreva = 'escreva';
    programa = 'programa';
    var = 'var';
    se = 'se';
    entao = 'entao';
    senao = 'senao';
    enquanto = 'enquanto';    
    faca = 'faca';
    repita = 'repita';
    ate = 'ate';
    para = 'para';
    de = 'de';
    passo = 'passo';
    avalie = 'avalie';
    caso = 'caso';
    inicio = 'inicio';
    fim_ponto = 'fim.';
    fim_se = 'fim' hchar_ignored+ 'se';    
    fim_enquanto = 'fim' hchar_ignored+ 'enquanto';
    fim_para = 'fim para';
    fim_avalie = 'fim avalie';
    fim = 'fim';
    
    real = 'real';
    inteiro = 'inteiro';
    caractere = 'caractere';
    
    string = hstring;
    
    const = 'const';
    identificador = (hunderscore | char) (char | digito | hunderscore)*;
    char_ignored = hchar_ignored;
    
Ignored Tokens
    char_ignored, comentario_linha, comentario_bloco;
    
Productions
    start {-> start}= {start} esqueleto_programa {-> New start(esqueleto_programa)};
    esqueleto_programa {-> esqueleto_programa}= programa identificador ponto_e_virgula declaracao? inicio parte_comandos? fim_ponto
    {-> New esqueleto_programa(identificador,[declaracao.parte_declaracao],[parte_comandos.comandos])};
    
    declaracao {-> parte_declaracao*} = parte_declaracao+ {-> [parte_declaracao]};
    parte_declaracao = {pd} declaracao_variavel {-> declaracao_variavel.parte_declaracao}
			| {pd2} declaracao_constante {-> declaracao_constante.parte_declaracao};
    declaracao_variavel {-> parte_declaracao} = var tipo dois_pontos id_virgula ponto_e_virgula
    	{-> New parte_declaracao.declaracao_variavel(tipo,id_virgula)};
    declaracao_constante {-> parte_declaracao} = const identificador valor ponto_e_virgula 
    	{-> New parte_declaracao.declaracao_constante(identificador,valor)};
	    
    parte_comandos {-> comandos*} = comandos+ {-> [comandos]};
    comandos {-> comandos} = {atribuicao} variavel seta expressao ponto_e_virgula {-> New comandos.atribuicao(variavel,expressao)}
			| {leia} leia abre_paren id_virgula fecha_paren ponto_e_virgula {-> New comandos.leia(id_virgula)}
			| {escreva} escreva abre_paren exp_virgula_lista? expressao fecha_paren ponto_e_virgula {-> New comandos.escreva([exp_virgula_lista.exp_virgula],expressao)}
			| {condicional} se abre_paren expressao_logica fecha_paren entao parte_comandos fim_se ponto_e_virgula 
				{-> New comandos.condicional(expressao_logica,[parte_comandos.comandos])}
			| {condicional_senao} se abre_paren expressao_logica fecha_paren entao [entao_cmd]:parte_comandos senao [senao_cmd]:parte_comandos fim_se ponto_e_virgula 
				{-> New comandos.condicional_senao(expressao_logica,[entao_cmd.comandos],[senao_cmd.comandos])}
			| {avalie} avalie abre_paren expressao fecha_paren avalie_caso? avalie_senao? fim_avalie {-> New comandos.avalie(expressao)}
			| {repeticao} repeticao {-> New comandos.repeticao(repeticao)};
    
    repeticao {-> repeticao} = {enquanto} enquanto abre_paren expressao_logica fecha_paren faca comandos+ fim_enquanto
    {-> New repeticao.enquanto(expressao_logica,[comandos])}
            | {repita} repita comandos+ ate abre_paren expressao_logica fecha_paren ponto_e_virgula
            	{-> New repeticao.repita([comandos],expressao_logica)}
            | {para} para identificador de [de_num]:numero_inteiro ate [ate_num]:numero_inteiro comandos+ fim_para ponto_e_virgula
            	{-> New repeticao.para(de_num,ate_num,[comandos])}
            | {para_passo} para identificador de [de_num]:numero_inteiro passo [passo_num]:numero_inteiro ate [ate_num]:numero_inteiro comandos+ fim_para ponto_e_virgula
            	{-> New repeticao.para_passo(de_num,passo_num,ate_num,[comandos])};
    
    id_virgula {-> id_virgula}= {id} variavel {-> New id_virgula.id(variavel)}    		
    		| {idv} variavel virgula id_virgula {-> New id_virgula.idvirgula(variavel,id_virgula)};    
    exp_virgula_lista {-> exp_virgula*} = exp_virgula+ {-> [exp_virgula]};
    exp_virgula {-> exp_virgula} = expressao virgula {-> New exp_virgula(expressao)};    
    
    avalie_caso {-> avalie_caso_sub*} = avalie_caso_sub+ {-> [avalie_caso_sub]};
    avalie_caso_sub = caso valor dois_pontos parte_comandos {-> New avalie_caso_sub([parte_comandos.comandos])};
    avalie_senao {-> avalie_senao}= senao dois_pontos parte_comandos {-> New avalie_senao([parte_comandos.comandos])};
    
    valor {-> valor}= {v1} string {-> New valor.string(string)} 
    		| {v2} numero_inteiro {-> New valor.numero_inteiro(numero_inteiro)} 
    		| {v3} numero_real {-> New valor.numero_real(numero_real)};
    variavel {-> variavel}= {v1} identificador {-> New variavel.identificador(identificador)} 
    		| {v2} identificador abre_colchete numero_inteiro fecha_colchete
    		{-> New variavel.vetor(identificador,numero_inteiro)};
     
    tipo {-> tipo} = {real} real {-> New tipo.real(real)}
    		| {int} inteiro {-> New tipo.inteiro(inteiro)}
    		| {char} caractere {-> New tipo.caractere(caractere)};
    soma = {mais} mais | {menos} menos;
    multiplicacao = {mult} mult | {div} divisao;
    
    expressao {-> expressao} = {exp1} expressao mais termo {-> New expressao.mais(expressao,termo.expressao)} 
    			| {exp2} expressao menos termo {-> New expressao.menos(expressao,termo.expressao)}    			
    			| {termo} termo {-> termo.expressao};
    termo {-> expressao} = {term1} termo mult fator {-> New expressao.mult(termo.expressao,fator.expressao)}
    		| {term2} termo divisao fator {-> New expressao.divisao(termo.expressao,fator.expressao)}
    		| {fator} fator {-> fator.expressao};
    fator {-> expressao} = {fator1} abre_paren expressao fecha_paren {-> expressao}
    		| {valor} valor {-> New expressao.valor(valor)} 
    		| {variavel} variavel {-> New expressao.variavel(variavel)};
    
    expressao_logica {-> expressao_logica} = {expl1} expressao_logica ou termo_log {-> New expressao_logica.ou(expressao_logica,termo_log.expressao_logica)}
    		| {expl2} expressao_logica xor termo_log {-> New expressao_logica.xor(expressao_logica,termo_log.expressao_logica)}	
    		| {expl3} termo_log {-> termo_log.expressao_logica};
    termo_log {-> expressao_logica} = {termol1} termo_log e fator_rel {-> New expressao_logica.e(termo_log.expressao_logica,fator_rel.expressao_logica)}
    		| {termol2} fator_rel {-> fator_rel.expressao_logica}
    		| {termol3} expressao_comp {-> expressao_comp.expressao_logica};
    		
    fator_rel {-> expressao_logica} = {fr1} abre_paren expressao_logica fecha_paren {-> expressao_logica} 
    		| {fr2} nao abre_paren expressao_logica fecha_paren {-> expressao_logica};
    		
    expressao_comp {-> expressao_logica} = {exp3} expressao igual termo {-> New expressao_logica.igual(expressao,termo.expressao)}
    		| {exp4} expressao diferente termo {-> New expressao_logica.diferente(expressao,termo.expressao)}
    		| {exp5} expressao menor_igual termo {-> New expressao_logica.menor_igual(expressao,termo.expressao)}
    		| {exp6} expressao maior_igual termo {-> New expressao_logica.maior_igual(expressao,termo.expressao)}
    		| {exp7} expressao menor termo {-> New expressao_logica.menor(expressao,termo.expressao)}
    		| {exp8} expressao maior termo {-> New expressao_logica.maior(expressao,termo.expressao)};
    
Abstract Syntax Tree
	start = esqueleto_programa;
	esqueleto_programa = identificador parte_declaracao* comandos*;	
	
	parte_declaracao = {declaracao_variavel} tipo id_virgula
   					| {declaracao_constante} identificador valor;   					   	
   	
   	tipo = {real} real | {inteiro} inteiro | {caractere} caractere;
	
	comandos = {atribuicao} variavel expressao
                    | {leia} id_virgula
                    | {escreva} exp_virgula* expressao
                    | {condicional} expressao_logica comandos*
                    | {condicional_senao} expressao_logica [entao_cmd]:comandos* [senao_cmd]:comandos*
                    | {avalie} expressao
                    | {repeticao} repeticao;
	
	id_virgula = {id} variavel | {idvirgula} variavel id_virgula;
	exp_virgula = expressao;
	repeticao  = {enquanto} expressao_logica comandos+
            | {repita} comandos+ expressao_logica
            | {para} [de_num]:numero_inteiro [ate_num]:numero_inteiro comandos+
            | {para_passo} [de_num]:numero_inteiro [passo_num]:numero_inteiro [ate_num]:numero_inteiro comandos+;
	
	avalie_caso_sub = comandos*;
    avalie_senao = comandos*;
	
	valor = {string} string | {numero_inteiro} numero_inteiro | {numero_real} numero_real;
	variavel = {identificador} identificador | {vetor} identificador numero_inteiro;
    
    expressao = {mais} [l]:expressao [r]:expressao
    		| {menos} [l]:expressao [r]:expressao
    		| {mult} [l]:expressao [r]:expressao
    		| {divisao} [l]:expressao [r]:expressao
    		| {variavel} variavel 
    		| {valor} valor;
    
    expressao_logica = {ou} [l]:expressao_logica [r]:expressao_logica
    		| {xor} [l]:expressao_logica [r]:expressao_logica
    		| {e} [l]:expressao_logica [r]:expressao_logica
    		| {igual} [l]:expressao [r]:expressao
    		| {diferente} [l]:expressao [r]:expressao
    		| {menor} [l]:expressao [r]:expressao
    		| {menor_igual} [l]:expressao [r]:expressao
    		| {maior} [l]:expressao [r]:expressao
    		| {maior_igual} [l]:expressao [r]:expressao;