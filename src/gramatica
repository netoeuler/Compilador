Package compilador;
 
Helpers     
    charmin = ['a' .. 'z']+;
    charmai = ['A' .. 'Z']+;
    char = [['a'..'z'] + ['A'..'Z']];
    digito = ['0' .. '9']+;
    qualquer_char = [0x0 .. 0xffff];
    
    underscore = '_';
    
    cr = 13 ;
    lf = 10 ;
    tab = 9 ;
    blank = ' ';
    hchar_ignored = cr|lf|blank|tab|'\n';
    nao_cr_lf = [qualquer_char - [13 + 10]];
    nao_estrela = [qualquer_char - '*'];
    nao_estrela_barra = [nao_estrela - '/'];
    hstring = ''' [nao_cr_lf - ''']+ ''';
 
Tokens
    comment_line = '//' [qualquer_char - 10]* hchar_ignored*;
    coment_bloco = '/*' nao_estrela* '*'+ (nao_estrela_barra nao_estrela* '*'+)* '/';
    
    numero_inteiro = digito+;
    numero_real = digito? '.' digito+;
    numero = digito+ | digito? '.' digito+;
        
    mais = '+';
    menos = '-';
    divisao = '/';
    mult = '*';
    soma = '+' | '-';
    
    menor = '<';
    menor_igual = '<=';
    maior = '>';
    maior_igual = '>=';
    
    seta = '<-';
    igual_igual = '==';
    diferente = '!=';
    igual = '=';    
 
    ponto_e_virgula = ';';
    virgula = ',';
    abre_paren = '(' ;
    fecha_paren = ')' ;
    abre_colchete = '[' ;
    fecha_colchete = ']' ;
    abre_chave = '{' ;
    fecha_chave = '}' ;
    abre_coment = '/*' ;
    fecha_coment = '*/' ;
    ponto = '.';
    dois_pontos = ':';
    
    leia = 'leia';
    escreva = 'escreva';
    programa = 'programa';
    var = 'var';
    se = 'se';
    entao = 'entao';
    senao = 'senao';
    enquanto = 'enquanto';    
    faca = 'faca';
    repita = 'repita';
    ate = 'ate';
    para = 'para';
    de = 'de';
    passo = 'passo';
    inicio = 'inicio';
    fim_ponto = 'fim.';
	fim_se = 'fim' hchar_ignored+ 'se';	
	fim_enquanto = 'fim' hchar_ignored+ 'enquanto';
	fim_para = 'fim para';
	fim = 'fim';
    
    tipo = 'real' | 'inteiro' | 'caractere';
    real = 'real';
    inteiro = 'inteiro';
    caractere = 'caractere';
    
    nome_programa = charmai (charmin|charmai)*;
    
    string = hstring;
    valor = hstring | digito+;
    
    identificador = (underscore | char) (char | digito | underscore)*;
    char_ignored = hchar_ignored;
    
Ignored Tokens
	char_ignored, comment_line;
    
Productions
	start = {start} esqueleto_programa;
	esqueleto_programa = {esqueleto} programa identificador ponto_e_virgula parte_declaracao+ inicio fim_ponto;
	
	parte_declaracao = {declaracao} var tipo dois_pontos id_virgula? identificador ponto_e_virgula;
	
	parte_comandos = {atribuicao} identificador seta atrib1
					| {leia} leia abre_paren id_virgula identificador fecha_paren
					| {escreva} escreva abre_paren exp_virgula expressao fecha_paren
					| {condicional} condicional
					| {repeticao} repeticao;
	
	condicional = {if_a} if_associado | {if_na} if_nao_associado;
	if_associado = {if_a1} se expressao_logica entao if_associado senao if_nao_associado;
	if_nao_associado = {if_na1} se expressao_logica senao condicional 
					| {if_na2} se expressao_logica entao if_associado senao if_nao_associado;
	
	repeticao = {enquanto} enquanto abre_paren expressao_logica fecha_paren faca cmd_ponto_virgula? parte_comandos ponto_e_virgula fim_enquanto
			| {repita} repita cmd_ponto_virgula? parte_comandos ponto_e_virgula ate abre_paren expressao_logica fecha_paren
			| {para} para identificador de numero_inteiro para_sub cmd_ponto_virgula? parte_comandos ponto_e_virgula fim_para_ponto_virgula;
	
	id_virgula = {id_virgula} identificador virgula;
	exp_virgula = {exp_virgula} expressao virgula;
	cmd_ponto_virgula = {cmd_ponto_virgula} parte_comandos ponto_e_virgula;
	fim_para_ponto_virgula = {fp_pv} fim_para ponto_e_virgula;
	atrib1 = {atrib_id} identificador | {atrib_num} numero | {atrib_str} string;
	para_sub = {p_sub_ate} ate numero_inteiro para_sub_passo;
	para_sub_passo = {p_sub_passo1} passo numero_inteiro para_sub_ate | {p_sub_passo2} para_sub_ate;
	para_sub_ate = {p_sub_ate} ate numero_inteiro;
	
	expressao = {valor} valor | {exp_id} identificador;
	expressao_logica = {igualdade} expressao;