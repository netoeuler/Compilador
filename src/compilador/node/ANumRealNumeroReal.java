/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import java.util.*;
import compilador.analysis.*;

@SuppressWarnings("nls")
public final class ANumRealNumeroReal extends PNumeroReal
{
    private TNumero _numero_;
    private TVirgula _virgula_;
    private final LinkedList<PNumeroInteiro> _numeroInteiro_ = new LinkedList<PNumeroInteiro>();

    public ANumRealNumeroReal()
    {
        // Constructor
    }

    public ANumRealNumeroReal(
        @SuppressWarnings("hiding") TNumero _numero_,
        @SuppressWarnings("hiding") TVirgula _virgula_,
        @SuppressWarnings("hiding") List<?> _numeroInteiro_)
    {
        // Constructor
        setNumero(_numero_);

        setVirgula(_virgula_);

        setNumeroInteiro(_numeroInteiro_);

    }

    @Override
    public Object clone()
    {
        return new ANumRealNumeroReal(
            cloneNode(this._numero_),
            cloneNode(this._virgula_),
            cloneList(this._numeroInteiro_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANumRealNumeroReal(this);
    }

    public TNumero getNumero()
    {
        return this._numero_;
    }

    public void setNumero(TNumero node)
    {
        if(this._numero_ != null)
        {
            this._numero_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._numero_ = node;
    }

    public TVirgula getVirgula()
    {
        return this._virgula_;
    }

    public void setVirgula(TVirgula node)
    {
        if(this._virgula_ != null)
        {
            this._virgula_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._virgula_ = node;
    }

    public LinkedList<PNumeroInteiro> getNumeroInteiro()
    {
        return this._numeroInteiro_;
    }

    public void setNumeroInteiro(List<?> list)
    {
        for(PNumeroInteiro e : this._numeroInteiro_)
        {
            e.parent(null);
        }
        this._numeroInteiro_.clear();

        for(Object obj_e : list)
        {
            PNumeroInteiro e = (PNumeroInteiro) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._numeroInteiro_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._numero_)
            + toString(this._virgula_)
            + toString(this._numeroInteiro_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._numero_ == child)
        {
            this._numero_ = null;
            return;
        }

        if(this._virgula_ == child)
        {
            this._virgula_ = null;
            return;
        }

        if(this._numeroInteiro_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._numero_ == oldChild)
        {
            setNumero((TNumero) newChild);
            return;
        }

        if(this._virgula_ == oldChild)
        {
            setVirgula((TVirgula) newChild);
            return;
        }

        for(ListIterator<PNumeroInteiro> i = this._numeroInteiro_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PNumeroInteiro) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
