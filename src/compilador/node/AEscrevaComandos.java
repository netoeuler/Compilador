/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import java.util.*;
import compilador.analysis.*;

@SuppressWarnings("nls")
public final class AEscrevaComandos extends PComandos
{
    private final LinkedList<PExpVirgula> _expVirgula_ = new LinkedList<PExpVirgula>();
    private PExpressao _expressao_;
    private PExpressaoLogica _expressaoLogica_;

    public AEscrevaComandos()
    {
        // Constructor
    }

    public AEscrevaComandos(
        @SuppressWarnings("hiding") List<?> _expVirgula_,
        @SuppressWarnings("hiding") PExpressao _expressao_,
        @SuppressWarnings("hiding") PExpressaoLogica _expressaoLogica_)
    {
        // Constructor
        setExpVirgula(_expVirgula_);

        setExpressao(_expressao_);

        setExpressaoLogica(_expressaoLogica_);

    }

    @Override
    public Object clone()
    {
        return new AEscrevaComandos(
            cloneList(this._expVirgula_),
            cloneNode(this._expressao_),
            cloneNode(this._expressaoLogica_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEscrevaComandos(this);
    }

    public LinkedList<PExpVirgula> getExpVirgula()
    {
        return this._expVirgula_;
    }

    public void setExpVirgula(List<?> list)
    {
        for(PExpVirgula e : this._expVirgula_)
        {
            e.parent(null);
        }
        this._expVirgula_.clear();

        for(Object obj_e : list)
        {
            PExpVirgula e = (PExpVirgula) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._expVirgula_.add(e);
        }
    }

    public PExpressao getExpressao()
    {
        return this._expressao_;
    }

    public void setExpressao(PExpressao node)
    {
        if(this._expressao_ != null)
        {
            this._expressao_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressao_ = node;
    }

    public PExpressaoLogica getExpressaoLogica()
    {
        return this._expressaoLogica_;
    }

    public void setExpressaoLogica(PExpressaoLogica node)
    {
        if(this._expressaoLogica_ != null)
        {
            this._expressaoLogica_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressaoLogica_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expVirgula_)
            + toString(this._expressao_)
            + toString(this._expressaoLogica_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expVirgula_.remove(child))
        {
            return;
        }

        if(this._expressao_ == child)
        {
            this._expressao_ = null;
            return;
        }

        if(this._expressaoLogica_ == child)
        {
            this._expressaoLogica_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PExpVirgula> i = this._expVirgula_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExpVirgula) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._expressao_ == oldChild)
        {
            setExpressao((PExpressao) newChild);
            return;
        }

        if(this._expressaoLogica_ == oldChild)
        {
            setExpressaoLogica((PExpressaoLogica) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
