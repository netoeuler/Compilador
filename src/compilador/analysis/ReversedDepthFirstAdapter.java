/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import java.util.*;
import compilador.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPStart().apply(this);
        outStart(node);
    }

    public void inAStartStart(AStartStart node)
    {
        defaultIn(node);
    }

    public void outAStartStart(AStartStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStartStart(AStartStart node)
    {
        inAStartStart(node);
        if(node.getEsqueletoPrograma() != null)
        {
            node.getEsqueletoPrograma().apply(this);
        }
        outAStartStart(node);
    }

    public void inAEsqueletoEsqueletoPrograma(AEsqueletoEsqueletoPrograma node)
    {
        defaultIn(node);
    }

    public void outAEsqueletoEsqueletoPrograma(AEsqueletoEsqueletoPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEsqueletoEsqueletoPrograma(AEsqueletoEsqueletoPrograma node)
    {
        inAEsqueletoEsqueletoPrograma(node);
        if(node.getFimPonto() != null)
        {
            node.getFimPonto().apply(this);
        }
        {
            List<PParteComandos> copy = new ArrayList<PParteComandos>(node.getParteComandos());
            Collections.reverse(copy);
            for(PParteComandos e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        outAEsqueletoEsqueletoPrograma(node);
    }

    public void inADeclaracao(ADeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclaracao(ADeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracao(ADeclaracao node)
    {
        inADeclaracao(node);
        {
            List<PParteDeclaracao> copy = new ArrayList<PParteDeclaracao>(node.getParteDeclaracao());
            Collections.reverse(copy);
            for(PParteDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        outADeclaracao(node);
    }

    public void inADeclaracaoParteDeclaracao(ADeclaracaoParteDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoParteDeclaracao(ADeclaracaoParteDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoParteDeclaracao(ADeclaracaoParteDeclaracao node)
    {
        inADeclaracaoParteDeclaracao(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getIdVirgula() != null)
        {
            node.getIdVirgula().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outADeclaracaoParteDeclaracao(node);
    }

    public void inADeclaracao2ParteDeclaracao(ADeclaracao2ParteDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclaracao2ParteDeclaracao(ADeclaracao2ParteDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracao2ParteDeclaracao(ADeclaracao2ParteDeclaracao node)
    {
        inADeclaracao2ParteDeclaracao(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        outADeclaracao2ParteDeclaracao(node);
    }

    public void inAAtribuicaoParteComandos(AAtribuicaoParteComandos node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoParteComandos(AAtribuicaoParteComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoParteComandos(AAtribuicaoParteComandos node)
    {
        inAAtribuicaoParteComandos(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getAtrib1() != null)
        {
            node.getAtrib1().apply(this);
        }
        if(node.getSeta() != null)
        {
            node.getSeta().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAAtribuicaoParteComandos(node);
    }

    public void inALeiaParteComandos(ALeiaParteComandos node)
    {
        defaultIn(node);
    }

    public void outALeiaParteComandos(ALeiaParteComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaParteComandos(ALeiaParteComandos node)
    {
        inALeiaParteComandos(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getFechaParen() != null)
        {
            node.getFechaParen().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getIdVirgula() != null)
        {
            node.getIdVirgula().apply(this);
        }
        if(node.getAbreParen() != null)
        {
            node.getAbreParen().apply(this);
        }
        if(node.getLeia() != null)
        {
            node.getLeia().apply(this);
        }
        outALeiaParteComandos(node);
    }

    public void inAEscrevaParteComandos(AEscrevaParteComandos node)
    {
        defaultIn(node);
    }

    public void outAEscrevaParteComandos(AEscrevaParteComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaParteComandos(AEscrevaParteComandos node)
    {
        inAEscrevaParteComandos(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getFechaParen() != null)
        {
            node.getFechaParen().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getExpVirgula() != null)
        {
            node.getExpVirgula().apply(this);
        }
        if(node.getAbreParen() != null)
        {
            node.getAbreParen().apply(this);
        }
        if(node.getEscreva() != null)
        {
            node.getEscreva().apply(this);
        }
        outAEscrevaParteComandos(node);
    }

    public void inACondicionalParteComandos(ACondicionalParteComandos node)
    {
        defaultIn(node);
    }

    public void outACondicionalParteComandos(ACondicionalParteComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondicionalParteComandos(ACondicionalParteComandos node)
    {
        inACondicionalParteComandos(node);
        if(node.getCondicional() != null)
        {
            node.getCondicional().apply(this);
        }
        outACondicionalParteComandos(node);
    }

    public void inARepeticaoParteComandos(ARepeticaoParteComandos node)
    {
        defaultIn(node);
    }

    public void outARepeticaoParteComandos(ARepeticaoParteComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepeticaoParteComandos(ARepeticaoParteComandos node)
    {
        inARepeticaoParteComandos(node);
        if(node.getRepeticao() != null)
        {
            node.getRepeticao().apply(this);
        }
        outARepeticaoParteComandos(node);
    }

    public void inAIfACondicional(AIfACondicional node)
    {
        defaultIn(node);
    }

    public void outAIfACondicional(AIfACondicional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfACondicional(AIfACondicional node)
    {
        inAIfACondicional(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getFimSe() != null)
        {
            node.getFimSe().apply(this);
        }
        if(node.getCondSenao() != null)
        {
            node.getCondSenao().apply(this);
        }
        {
            List<PParteComandos> copy = new ArrayList<PParteComandos>(node.getParteComandos());
            Collections.reverse(copy);
            for(PParteComandos e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getFechaParen() != null)
        {
            node.getFechaParen().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        if(node.getAbreParen() != null)
        {
            node.getAbreParen().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outAIfACondicional(node);
    }

    public void inACondSenao(ACondSenao node)
    {
        defaultIn(node);
    }

    public void outACondSenao(ACondSenao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondSenao(ACondSenao node)
    {
        inACondSenao(node);
        {
            List<PParteComandos> copy = new ArrayList<PParteComandos>(node.getParteComandos());
            Collections.reverse(copy);
            for(PParteComandos e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outACondSenao(node);
    }

    public void inAEnquantoRepeticao(AEnquantoRepeticao node)
    {
        defaultIn(node);
    }

    public void outAEnquantoRepeticao(AEnquantoRepeticao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoRepeticao(AEnquantoRepeticao node)
    {
        inAEnquantoRepeticao(node);
        if(node.getFimEnquanto() != null)
        {
            node.getFimEnquanto().apply(this);
        }
        {
            List<PParteComandos> copy = new ArrayList<PParteComandos>(node.getParteComandos());
            Collections.reverse(copy);
            for(PParteComandos e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getFechaParen() != null)
        {
            node.getFechaParen().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        if(node.getAbreParen() != null)
        {
            node.getAbreParen().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAEnquantoRepeticao(node);
    }

    public void inARepitaRepeticao(ARepitaRepeticao node)
    {
        defaultIn(node);
    }

    public void outARepitaRepeticao(ARepitaRepeticao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaRepeticao(ARepitaRepeticao node)
    {
        inARepitaRepeticao(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getFechaParen() != null)
        {
            node.getFechaParen().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        if(node.getAbreParen() != null)
        {
            node.getAbreParen().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        {
            List<PParteComandos> copy = new ArrayList<PParteComandos>(node.getParteComandos());
            Collections.reverse(copy);
            for(PParteComandos e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRepita() != null)
        {
            node.getRepita().apply(this);
        }
        outARepitaRepeticao(node);
    }

    public void inAParaRepeticao(AParaRepeticao node)
    {
        defaultIn(node);
    }

    public void outAParaRepeticao(AParaRepeticao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaRepeticao(AParaRepeticao node)
    {
        inAParaRepeticao(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        {
            List<PParteComandos> copy = new ArrayList<PParteComandos>(node.getParteComandos());
            Collections.reverse(copy);
            for(PParteComandos e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParaSub() != null)
        {
            node.getParaSub().apply(this);
        }
        if(node.getNumeroInteiro() != null)
        {
            node.getNumeroInteiro().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAParaRepeticao(node);
    }

    public void inAIdVirgulaIdVirgula(AIdVirgulaIdVirgula node)
    {
        defaultIn(node);
    }

    public void outAIdVirgulaIdVirgula(AIdVirgulaIdVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVirgulaIdVirgula(AIdVirgulaIdVirgula node)
    {
        inAIdVirgulaIdVirgula(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdVirgulaIdVirgula(node);
    }

    public void inAExpVirgulaExpVirgula(AExpVirgulaExpVirgula node)
    {
        defaultIn(node);
    }

    public void outAExpVirgulaExpVirgula(AExpVirgulaExpVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpVirgulaExpVirgula(AExpVirgulaExpVirgula node)
    {
        inAExpVirgulaExpVirgula(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outAExpVirgulaExpVirgula(node);
    }

    public void inAFpPvFimParaPontoVirgula(AFpPvFimParaPontoVirgula node)
    {
        defaultIn(node);
    }

    public void outAFpPvFimParaPontoVirgula(AFpPvFimParaPontoVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFpPvFimParaPontoVirgula(AFpPvFimParaPontoVirgula node)
    {
        inAFpPvFimParaPontoVirgula(node);
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        outAFpPvFimParaPontoVirgula(node);
    }

    public void inAAtribIdAtrib1(AAtribIdAtrib1 node)
    {
        defaultIn(node);
    }

    public void outAAtribIdAtrib1(AAtribIdAtrib1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribIdAtrib1(AAtribIdAtrib1 node)
    {
        inAAtribIdAtrib1(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAAtribIdAtrib1(node);
    }

    public void inAAtribNumAtrib1(AAtribNumAtrib1 node)
    {
        defaultIn(node);
    }

    public void outAAtribNumAtrib1(AAtribNumAtrib1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribNumAtrib1(AAtribNumAtrib1 node)
    {
        inAAtribNumAtrib1(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outAAtribNumAtrib1(node);
    }

    public void inAAtribStrAtrib1(AAtribStrAtrib1 node)
    {
        defaultIn(node);
    }

    public void outAAtribStrAtrib1(AAtribStrAtrib1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribStrAtrib1(AAtribStrAtrib1 node)
    {
        inAAtribStrAtrib1(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAAtribStrAtrib1(node);
    }

    public void inAPSubAteParaSub(APSubAteParaSub node)
    {
        defaultIn(node);
    }

    public void outAPSubAteParaSub(APSubAteParaSub node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPSubAteParaSub(APSubAteParaSub node)
    {
        inAPSubAteParaSub(node);
        if(node.getParaSubPasso() != null)
        {
            node.getParaSubPasso().apply(this);
        }
        if(node.getNumeroInteiro() != null)
        {
            node.getNumeroInteiro().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        outAPSubAteParaSub(node);
    }

    public void inAPSubPasso1ParaSubPasso(APSubPasso1ParaSubPasso node)
    {
        defaultIn(node);
    }

    public void outAPSubPasso1ParaSubPasso(APSubPasso1ParaSubPasso node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPSubPasso1ParaSubPasso(APSubPasso1ParaSubPasso node)
    {
        inAPSubPasso1ParaSubPasso(node);
        if(node.getParaSubAte() != null)
        {
            node.getParaSubAte().apply(this);
        }
        if(node.getNumeroInteiro() != null)
        {
            node.getNumeroInteiro().apply(this);
        }
        if(node.getPasso() != null)
        {
            node.getPasso().apply(this);
        }
        outAPSubPasso1ParaSubPasso(node);
    }

    public void inAPSubPasso2ParaSubPasso(APSubPasso2ParaSubPasso node)
    {
        defaultIn(node);
    }

    public void outAPSubPasso2ParaSubPasso(APSubPasso2ParaSubPasso node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPSubPasso2ParaSubPasso(APSubPasso2ParaSubPasso node)
    {
        inAPSubPasso2ParaSubPasso(node);
        if(node.getParaSubAte() != null)
        {
            node.getParaSubAte().apply(this);
        }
        outAPSubPasso2ParaSubPasso(node);
    }

    public void inAPSubAteParaSubAte(APSubAteParaSubAte node)
    {
        defaultIn(node);
    }

    public void outAPSubAteParaSubAte(APSubAteParaSubAte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPSubAteParaSubAte(APSubAteParaSubAte node)
    {
        inAPSubAteParaSubAte(node);
        if(node.getNumeroInteiro() != null)
        {
            node.getNumeroInteiro().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        outAPSubAteParaSubAte(node);
    }

    public void inANumIntNumeroInteiro(ANumIntNumeroInteiro node)
    {
        defaultIn(node);
    }

    public void outANumIntNumeroInteiro(ANumIntNumeroInteiro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumIntNumeroInteiro(ANumIntNumeroInteiro node)
    {
        inANumIntNumeroInteiro(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumIntNumeroInteiro(node);
    }

    public void inANumRealNumeroReal(ANumRealNumeroReal node)
    {
        defaultIn(node);
    }

    public void outANumRealNumeroReal(ANumRealNumeroReal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumRealNumeroReal(ANumRealNumeroReal node)
    {
        inANumRealNumeroReal(node);
        {
            List<PNumeroInteiro> copy = new ArrayList<PNumeroInteiro>(node.getNumeroInteiro());
            Collections.reverse(copy);
            for(PNumeroInteiro e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumRealNumeroReal(node);
    }

    public void inAV1Valor(AV1Valor node)
    {
        defaultIn(node);
    }

    public void outAV1Valor(AV1Valor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAV1Valor(AV1Valor node)
    {
        inAV1Valor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAV1Valor(node);
    }

    public void inAV2Valor(AV2Valor node)
    {
        defaultIn(node);
    }

    public void outAV2Valor(AV2Valor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAV2Valor(AV2Valor node)
    {
        inAV2Valor(node);
        if(node.getNumeroInteiro() != null)
        {
            node.getNumeroInteiro().apply(this);
        }
        outAV2Valor(node);
    }

    public void inAV1Variavel(AV1Variavel node)
    {
        defaultIn(node);
    }

    public void outAV1Variavel(AV1Variavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAV1Variavel(AV1Variavel node)
    {
        inAV1Variavel(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAV1Variavel(node);
    }

    public void inAV2Variavel(AV2Variavel node)
    {
        defaultIn(node);
    }

    public void outAV2Variavel(AV2Variavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAV2Variavel(AV2Variavel node)
    {
        inAV2Variavel(node);
        if(node.getFechaColchete() != null)
        {
            node.getFechaColchete().apply(this);
        }
        if(node.getNumeroInteiro() != null)
        {
            node.getNumeroInteiro().apply(this);
        }
        if(node.getAbreColchete() != null)
        {
            node.getAbreColchete().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAV2Variavel(node);
    }

    public void inARealTipo(ARealTipo node)
    {
        defaultIn(node);
    }

    public void outARealTipo(ARealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipo(ARealTipo node)
    {
        inARealTipo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealTipo(node);
    }

    public void inAIntTipo(AIntTipo node)
    {
        defaultIn(node);
    }

    public void outAIntTipo(AIntTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTipo(AIntTipo node)
    {
        inAIntTipo(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAIntTipo(node);
    }

    public void inACharTipo(ACharTipo node)
    {
        defaultIn(node);
    }

    public void outACharTipo(ACharTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharTipo(ACharTipo node)
    {
        inACharTipo(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACharTipo(node);
    }

    public void inAMaisSoma(AMaisSoma node)
    {
        defaultIn(node);
    }

    public void outAMaisSoma(AMaisSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisSoma(AMaisSoma node)
    {
        inAMaisSoma(node);
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        outAMaisSoma(node);
    }

    public void inAMenosSoma(AMenosSoma node)
    {
        defaultIn(node);
    }

    public void outAMenosSoma(AMenosSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosSoma(AMenosSoma node)
    {
        inAMenosSoma(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outAMenosSoma(node);
    }

    public void inAMultMultiplicacao(AMultMultiplicacao node)
    {
        defaultIn(node);
    }

    public void outAMultMultiplicacao(AMultMultiplicacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultMultiplicacao(AMultMultiplicacao node)
    {
        inAMultMultiplicacao(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMultMultiplicacao(node);
    }

    public void inADivMultiplicacao(ADivMultiplicacao node)
    {
        defaultIn(node);
    }

    public void outADivMultiplicacao(ADivMultiplicacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivMultiplicacao(ADivMultiplicacao node)
    {
        inADivMultiplicacao(node);
        if(node.getDivisao() != null)
        {
            node.getDivisao().apply(this);
        }
        outADivMultiplicacao(node);
    }

    public void inAOpr1OpRelacional(AOpr1OpRelacional node)
    {
        defaultIn(node);
    }

    public void outAOpr1OpRelacional(AOpr1OpRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpr1OpRelacional(AOpr1OpRelacional node)
    {
        inAOpr1OpRelacional(node);
        if(node.getOpRelacionalIgual() != null)
        {
            node.getOpRelacionalIgual().apply(this);
        }
        outAOpr1OpRelacional(node);
    }

    public void inAOpr2OpRelacional(AOpr2OpRelacional node)
    {
        defaultIn(node);
    }

    public void outAOpr2OpRelacional(AOpr2OpRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpr2OpRelacional(AOpr2OpRelacional node)
    {
        inAOpr2OpRelacional(node);
        if(node.getOpRelacionalComp() != null)
        {
            node.getOpRelacionalComp().apply(this);
        }
        outAOpr2OpRelacional(node);
    }

    public void inAIgualOpRelacionalIgual(AIgualOpRelacionalIgual node)
    {
        defaultIn(node);
    }

    public void outAIgualOpRelacionalIgual(AIgualOpRelacionalIgual node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualOpRelacionalIgual(AIgualOpRelacionalIgual node)
    {
        inAIgualOpRelacionalIgual(node);
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        outAIgualOpRelacionalIgual(node);
    }

    public void inADiferenteOpRelacionalIgual(ADiferenteOpRelacionalIgual node)
    {
        defaultIn(node);
    }

    public void outADiferenteOpRelacionalIgual(ADiferenteOpRelacionalIgual node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteOpRelacionalIgual(ADiferenteOpRelacionalIgual node)
    {
        inADiferenteOpRelacionalIgual(node);
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        outADiferenteOpRelacionalIgual(node);
    }

    public void inAMenorOpRelacionalComp(AMenorOpRelacionalComp node)
    {
        defaultIn(node);
    }

    public void outAMenorOpRelacionalComp(AMenorOpRelacionalComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorOpRelacionalComp(AMenorOpRelacionalComp node)
    {
        inAMenorOpRelacionalComp(node);
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        outAMenorOpRelacionalComp(node);
    }

    public void inAMenorIgualOpRelacionalComp(AMenorIgualOpRelacionalComp node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualOpRelacionalComp(AMenorIgualOpRelacionalComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualOpRelacionalComp(AMenorIgualOpRelacionalComp node)
    {
        inAMenorIgualOpRelacionalComp(node);
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        outAMenorIgualOpRelacionalComp(node);
    }

    public void inAMaiorOpRelacionalComp(AMaiorOpRelacionalComp node)
    {
        defaultIn(node);
    }

    public void outAMaiorOpRelacionalComp(AMaiorOpRelacionalComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorOpRelacionalComp(AMaiorOpRelacionalComp node)
    {
        inAMaiorOpRelacionalComp(node);
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        outAMaiorOpRelacionalComp(node);
    }

    public void inAMaiorIgualOpRelacionalComp(AMaiorIgualOpRelacionalComp node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualOpRelacionalComp(AMaiorIgualOpRelacionalComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualOpRelacionalComp(AMaiorIgualOpRelacionalComp node)
    {
        inAMaiorIgualOpRelacionalComp(node);
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        outAMaiorIgualOpRelacionalComp(node);
    }

    public void inAEOpLogico(AEOpLogico node)
    {
        defaultIn(node);
    }

    public void outAEOpLogico(AEOpLogico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEOpLogico(AEOpLogico node)
    {
        inAEOpLogico(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAEOpLogico(node);
    }

    public void inAOuOpLogico(AOuOpLogico node)
    {
        defaultIn(node);
    }

    public void outAOuOpLogico(AOuOpLogico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuOpLogico(AOuOpLogico node)
    {
        inAOuOpLogico(node);
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        outAOuOpLogico(node);
    }

    public void inAXorOpLogico(AXorOpLogico node)
    {
        defaultIn(node);
    }

    public void outAXorOpLogico(AXorOpLogico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorOpLogico(AXorOpLogico node)
    {
        inAXorOpLogico(node);
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        outAXorOpLogico(node);
    }

    public void inAOuOpLogicoOu(AOuOpLogicoOu node)
    {
        defaultIn(node);
    }

    public void outAOuOpLogicoOu(AOuOpLogicoOu node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuOpLogicoOu(AOuOpLogicoOu node)
    {
        inAOuOpLogicoOu(node);
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        outAOuOpLogicoOu(node);
    }

    public void inAXorOpLogicoOu(AXorOpLogicoOu node)
    {
        defaultIn(node);
    }

    public void outAXorOpLogicoOu(AXorOpLogicoOu node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorOpLogicoOu(AXorOpLogicoOu node)
    {
        inAXorOpLogicoOu(node);
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        outAXorOpLogicoOu(node);
    }

    public void inAExp1Expressao(AExp1Expressao node)
    {
        defaultIn(node);
    }

    public void outAExp1Expressao(AExp1Expressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp1Expressao(AExp1Expressao node)
    {
        inAExp1Expressao(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outAExp1Expressao(node);
    }

    public void inATermoExpressao(ATermoExpressao node)
    {
        defaultIn(node);
    }

    public void outATermoExpressao(ATermoExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoExpressao(ATermoExpressao node)
    {
        inATermoExpressao(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoExpressao(node);
    }

    public void inATerm1Termo(ATerm1Termo node)
    {
        defaultIn(node);
    }

    public void outATerm1Termo(ATerm1Termo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATerm1Termo(ATerm1Termo node)
    {
        inATerm1Termo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATerm1Termo(node);
    }

    public void inAFatorTermo(AFatorTermo node)
    {
        defaultIn(node);
    }

    public void outAFatorTermo(AFatorTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorTermo(AFatorTermo node)
    {
        inAFatorTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorTermo(node);
    }

    public void inAFator1Fator(AFator1Fator node)
    {
        defaultIn(node);
    }

    public void outAFator1Fator(AFator1Fator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFator1Fator(AFator1Fator node)
    {
        inAFator1Fator(node);
        if(node.getFechaParen() != null)
        {
            node.getFechaParen().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getAbreParen() != null)
        {
            node.getAbreParen().apply(this);
        }
        outAFator1Fator(node);
    }

    public void inANumFator(ANumFator node)
    {
        defaultIn(node);
    }

    public void outANumFator(ANumFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumFator(ANumFator node)
    {
        inANumFator(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outANumFator(node);
    }

    public void inAIdFator(AIdFator node)
    {
        defaultIn(node);
    }

    public void outAIdFator(AIdFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdFator(AIdFator node)
    {
        inAIdFator(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAIdFator(node);
    }

    public void inAExpl1ExpressaoLogica(AExpl1ExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAExpl1ExpressaoLogica(AExpl1ExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpl1ExpressaoLogica(AExpl1ExpressaoLogica node)
    {
        inAExpl1ExpressaoLogica(node);
        if(node.getTermoLog() != null)
        {
            node.getTermoLog().apply(this);
        }
        if(node.getOpLogicoOu() != null)
        {
            node.getOpLogicoOu().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        outAExpl1ExpressaoLogica(node);
    }

    public void inAExpl2ExpressaoLogica(AExpl2ExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAExpl2ExpressaoLogica(AExpl2ExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpl2ExpressaoLogica(AExpl2ExpressaoLogica node)
    {
        inAExpl2ExpressaoLogica(node);
        if(node.getTermoLog() != null)
        {
            node.getTermoLog().apply(this);
        }
        outAExpl2ExpressaoLogica(node);
    }

    public void inATermol1TermoLog(ATermol1TermoLog node)
    {
        defaultIn(node);
    }

    public void outATermol1TermoLog(ATermol1TermoLog node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermol1TermoLog(ATermol1TermoLog node)
    {
        inATermol1TermoLog(node);
        if(node.getExpRel() != null)
        {
            node.getExpRel().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getTermoLog() != null)
        {
            node.getTermoLog().apply(this);
        }
        outATermol1TermoLog(node);
    }

    public void inATermol2TermoLog(ATermol2TermoLog node)
    {
        defaultIn(node);
    }

    public void outATermol2TermoLog(ATermol2TermoLog node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermol2TermoLog(ATermol2TermoLog node)
    {
        inATermol2TermoLog(node);
        if(node.getExpRel() != null)
        {
            node.getExpRel().apply(this);
        }
        outATermol2TermoLog(node);
    }

    public void inAExpr1ExpRel(AExpr1ExpRel node)
    {
        defaultIn(node);
    }

    public void outAExpr1ExpRel(AExpr1ExpRel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr1ExpRel(AExpr1ExpRel node)
    {
        inAExpr1ExpRel(node);
        if(node.getTermoRel() != null)
        {
            node.getTermoRel().apply(this);
        }
        if(node.getOpRelacionalIgual() != null)
        {
            node.getOpRelacionalIgual().apply(this);
        }
        if(node.getFatorRel() != null)
        {
            node.getFatorRel().apply(this);
        }
        outAExpr1ExpRel(node);
    }

    public void inAExpr2ExpRel(AExpr2ExpRel node)
    {
        defaultIn(node);
    }

    public void outAExpr2ExpRel(AExpr2ExpRel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr2ExpRel(AExpr2ExpRel node)
    {
        inAExpr2ExpRel(node);
        if(node.getTermoRel() != null)
        {
            node.getTermoRel().apply(this);
        }
        outAExpr2ExpRel(node);
    }

    public void inATermor1TermoRel(ATermor1TermoRel node)
    {
        defaultIn(node);
    }

    public void outATermor1TermoRel(ATermor1TermoRel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermor1TermoRel(ATermor1TermoRel node)
    {
        inATermor1TermoRel(node);
        if(node.getFatorRel() != null)
        {
            node.getFatorRel().apply(this);
        }
        if(node.getOpRelacionalComp() != null)
        {
            node.getOpRelacionalComp().apply(this);
        }
        if(node.getTermoRel() != null)
        {
            node.getTermoRel().apply(this);
        }
        outATermor1TermoRel(node);
    }

    public void inATermor2TermoRel(ATermor2TermoRel node)
    {
        defaultIn(node);
    }

    public void outATermor2TermoRel(ATermor2TermoRel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermor2TermoRel(ATermor2TermoRel node)
    {
        inATermor2TermoRel(node);
        if(node.getFatorRel() != null)
        {
            node.getFatorRel().apply(this);
        }
        outATermor2TermoRel(node);
    }

    public void inAFr1FatorRel(AFr1FatorRel node)
    {
        defaultIn(node);
    }

    public void outAFr1FatorRel(AFr1FatorRel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFr1FatorRel(AFr1FatorRel node)
    {
        inAFr1FatorRel(node);
        if(node.getParen() != null)
        {
            node.getParen().apply(this);
        }
        outAFr1FatorRel(node);
    }

    public void inAFr3FatorRel(AFr3FatorRel node)
    {
        defaultIn(node);
    }

    public void outAFr3FatorRel(AFr3FatorRel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFr3FatorRel(AFr3FatorRel node)
    {
        inAFr3FatorRel(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAFr3FatorRel(node);
    }

    public void inAFr4FatorRel(AFr4FatorRel node)
    {
        defaultIn(node);
    }

    public void outAFr4FatorRel(AFr4FatorRel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFr4FatorRel(AFr4FatorRel node)
    {
        inAFr4FatorRel(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAFr4FatorRel(node);
    }

    public void inAPParen(APParen node)
    {
        defaultIn(node);
    }

    public void outAPParen(APParen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPParen(APParen node)
    {
        inAPParen(node);
        if(node.getFechaParen() != null)
        {
            node.getFechaParen().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        if(node.getAbreParen() != null)
        {
            node.getAbreParen().apply(this);
        }
        outAPParen(node);
    }
}
