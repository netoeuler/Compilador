/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import java.util.*;
import compilador.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPStart().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAStartStart(AStartStart node)
    {
        defaultIn(node);
    }

    public void outAStartStart(AStartStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStartStart(AStartStart node)
    {
        inAStartStart(node);
        if(node.getEsqueletoPrograma() != null)
        {
            node.getEsqueletoPrograma().apply(this);
        }
        outAStartStart(node);
    }

    public void inAEsqueletoEsqueletoPrograma(AEsqueletoEsqueletoPrograma node)
    {
        defaultIn(node);
    }

    public void outAEsqueletoEsqueletoPrograma(AEsqueletoEsqueletoPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEsqueletoEsqueletoPrograma(AEsqueletoEsqueletoPrograma node)
    {
        inAEsqueletoEsqueletoPrograma(node);
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        {
            List<PParteDeclaracao> copy = new ArrayList<PParteDeclaracao>(node.getParteDeclaracao());
            for(PParteDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getFimPonto() != null)
        {
            node.getFimPonto().apply(this);
        }
        outAEsqueletoEsqueletoPrograma(node);
    }

    public void inADeclaracaoParteDeclaracao(ADeclaracaoParteDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoParteDeclaracao(ADeclaracaoParteDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoParteDeclaracao(ADeclaracaoParteDeclaracao node)
    {
        inADeclaracaoParteDeclaracao(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getIdVirgula() != null)
        {
            node.getIdVirgula().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        outADeclaracaoParteDeclaracao(node);
    }

    public void inAAtribuicaoParteComandos(AAtribuicaoParteComandos node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoParteComandos(AAtribuicaoParteComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoParteComandos(AAtribuicaoParteComandos node)
    {
        inAAtribuicaoParteComandos(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getSeta() != null)
        {
            node.getSeta().apply(this);
        }
        if(node.getAtrib1() != null)
        {
            node.getAtrib1().apply(this);
        }
        outAAtribuicaoParteComandos(node);
    }

    public void inALeiaParteComandos(ALeiaParteComandos node)
    {
        defaultIn(node);
    }

    public void outALeiaParteComandos(ALeiaParteComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaParteComandos(ALeiaParteComandos node)
    {
        inALeiaParteComandos(node);
        if(node.getLeia() != null)
        {
            node.getLeia().apply(this);
        }
        if(node.getAbreParen() != null)
        {
            node.getAbreParen().apply(this);
        }
        if(node.getIdVirgula() != null)
        {
            node.getIdVirgula().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getFechaParen() != null)
        {
            node.getFechaParen().apply(this);
        }
        outALeiaParteComandos(node);
    }

    public void inAEscrevaParteComandos(AEscrevaParteComandos node)
    {
        defaultIn(node);
    }

    public void outAEscrevaParteComandos(AEscrevaParteComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaParteComandos(AEscrevaParteComandos node)
    {
        inAEscrevaParteComandos(node);
        if(node.getEscreva() != null)
        {
            node.getEscreva().apply(this);
        }
        if(node.getAbreParen() != null)
        {
            node.getAbreParen().apply(this);
        }
        if(node.getExpVirgula() != null)
        {
            node.getExpVirgula().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getFechaParen() != null)
        {
            node.getFechaParen().apply(this);
        }
        outAEscrevaParteComandos(node);
    }

    public void inACondicionalParteComandos(ACondicionalParteComandos node)
    {
        defaultIn(node);
    }

    public void outACondicionalParteComandos(ACondicionalParteComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondicionalParteComandos(ACondicionalParteComandos node)
    {
        inACondicionalParteComandos(node);
        if(node.getCondicional() != null)
        {
            node.getCondicional().apply(this);
        }
        outACondicionalParteComandos(node);
    }

    public void inARepeticaoParteComandos(ARepeticaoParteComandos node)
    {
        defaultIn(node);
    }

    public void outARepeticaoParteComandos(ARepeticaoParteComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepeticaoParteComandos(ARepeticaoParteComandos node)
    {
        inARepeticaoParteComandos(node);
        if(node.getRepeticao() != null)
        {
            node.getRepeticao().apply(this);
        }
        outARepeticaoParteComandos(node);
    }

    public void inAIfACondicional(AIfACondicional node)
    {
        defaultIn(node);
    }

    public void outAIfACondicional(AIfACondicional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfACondicional(AIfACondicional node)
    {
        inAIfACondicional(node);
        if(node.getIfAssociado() != null)
        {
            node.getIfAssociado().apply(this);
        }
        outAIfACondicional(node);
    }

    public void inAIfNaCondicional(AIfNaCondicional node)
    {
        defaultIn(node);
    }

    public void outAIfNaCondicional(AIfNaCondicional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfNaCondicional(AIfNaCondicional node)
    {
        inAIfNaCondicional(node);
        if(node.getIfNaoAssociado() != null)
        {
            node.getIfNaoAssociado().apply(this);
        }
        outAIfNaCondicional(node);
    }

    public void inAIfA1IfAssociado(AIfA1IfAssociado node)
    {
        defaultIn(node);
    }

    public void outAIfA1IfAssociado(AIfA1IfAssociado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfA1IfAssociado(AIfA1IfAssociado node)
    {
        inAIfA1IfAssociado(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getIfAssociado() != null)
        {
            node.getIfAssociado().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getIfNaoAssociado() != null)
        {
            node.getIfNaoAssociado().apply(this);
        }
        outAIfA1IfAssociado(node);
    }

    public void inAIfNa1IfNaoAssociado(AIfNa1IfNaoAssociado node)
    {
        defaultIn(node);
    }

    public void outAIfNa1IfNaoAssociado(AIfNa1IfNaoAssociado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfNa1IfNaoAssociado(AIfNa1IfNaoAssociado node)
    {
        inAIfNa1IfNaoAssociado(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getCondicional() != null)
        {
            node.getCondicional().apply(this);
        }
        outAIfNa1IfNaoAssociado(node);
    }

    public void inAIfNa2IfNaoAssociado(AIfNa2IfNaoAssociado node)
    {
        defaultIn(node);
    }

    public void outAIfNa2IfNaoAssociado(AIfNa2IfNaoAssociado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfNa2IfNaoAssociado(AIfNa2IfNaoAssociado node)
    {
        inAIfNa2IfNaoAssociado(node);
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getIfAssociado() != null)
        {
            node.getIfAssociado().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getIfNaoAssociado() != null)
        {
            node.getIfNaoAssociado().apply(this);
        }
        outAIfNa2IfNaoAssociado(node);
    }

    public void inAEnquantoRepeticao(AEnquantoRepeticao node)
    {
        defaultIn(node);
    }

    public void outAEnquantoRepeticao(AEnquantoRepeticao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoRepeticao(AEnquantoRepeticao node)
    {
        inAEnquantoRepeticao(node);
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        if(node.getAbreParen() != null)
        {
            node.getAbreParen().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        if(node.getFechaParen() != null)
        {
            node.getFechaParen().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getCmdPontoVirgula() != null)
        {
            node.getCmdPontoVirgula().apply(this);
        }
        if(node.getParteComandos() != null)
        {
            node.getParteComandos().apply(this);
        }
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getFimEnquanto() != null)
        {
            node.getFimEnquanto().apply(this);
        }
        outAEnquantoRepeticao(node);
    }

    public void inARepitaRepeticao(ARepitaRepeticao node)
    {
        defaultIn(node);
    }

    public void outARepitaRepeticao(ARepitaRepeticao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaRepeticao(ARepitaRepeticao node)
    {
        inARepitaRepeticao(node);
        if(node.getRepita() != null)
        {
            node.getRepita().apply(this);
        }
        if(node.getCmdPontoVirgula() != null)
        {
            node.getCmdPontoVirgula().apply(this);
        }
        if(node.getParteComandos() != null)
        {
            node.getParteComandos().apply(this);
        }
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getAbreParen() != null)
        {
            node.getAbreParen().apply(this);
        }
        if(node.getExpressaoLogica() != null)
        {
            node.getExpressaoLogica().apply(this);
        }
        if(node.getFechaParen() != null)
        {
            node.getFechaParen().apply(this);
        }
        outARepitaRepeticao(node);
    }

    public void inAParaRepeticao(AParaRepeticao node)
    {
        defaultIn(node);
    }

    public void outAParaRepeticao(AParaRepeticao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaRepeticao(AParaRepeticao node)
    {
        inAParaRepeticao(node);
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getNumeroInteiro() != null)
        {
            node.getNumeroInteiro().apply(this);
        }
        if(node.getParaSub() != null)
        {
            node.getParaSub().apply(this);
        }
        if(node.getCmdPontoVirgula() != null)
        {
            node.getCmdPontoVirgula().apply(this);
        }
        if(node.getParteComandos() != null)
        {
            node.getParteComandos().apply(this);
        }
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        if(node.getFimParaPontoVirgula() != null)
        {
            node.getFimParaPontoVirgula().apply(this);
        }
        outAParaRepeticao(node);
    }

    public void inAIdVirgulaIdVirgula(AIdVirgulaIdVirgula node)
    {
        defaultIn(node);
    }

    public void outAIdVirgulaIdVirgula(AIdVirgulaIdVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVirgulaIdVirgula(AIdVirgulaIdVirgula node)
    {
        inAIdVirgulaIdVirgula(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outAIdVirgulaIdVirgula(node);
    }

    public void inAExpVirgulaExpVirgula(AExpVirgulaExpVirgula node)
    {
        defaultIn(node);
    }

    public void outAExpVirgulaExpVirgula(AExpVirgulaExpVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpVirgulaExpVirgula(AExpVirgulaExpVirgula node)
    {
        inAExpVirgulaExpVirgula(node);
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outAExpVirgulaExpVirgula(node);
    }

    public void inACmdPontoVirgulaCmdPontoVirgula(ACmdPontoVirgulaCmdPontoVirgula node)
    {
        defaultIn(node);
    }

    public void outACmdPontoVirgulaCmdPontoVirgula(ACmdPontoVirgulaCmdPontoVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACmdPontoVirgulaCmdPontoVirgula(ACmdPontoVirgulaCmdPontoVirgula node)
    {
        inACmdPontoVirgulaCmdPontoVirgula(node);
        if(node.getParteComandos() != null)
        {
            node.getParteComandos().apply(this);
        }
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        outACmdPontoVirgulaCmdPontoVirgula(node);
    }

    public void inAFpPvFimParaPontoVirgula(AFpPvFimParaPontoVirgula node)
    {
        defaultIn(node);
    }

    public void outAFpPvFimParaPontoVirgula(AFpPvFimParaPontoVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFpPvFimParaPontoVirgula(AFpPvFimParaPontoVirgula node)
    {
        inAFpPvFimParaPontoVirgula(node);
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        if(node.getPontoEVirgula() != null)
        {
            node.getPontoEVirgula().apply(this);
        }
        outAFpPvFimParaPontoVirgula(node);
    }

    public void inAAtribIdAtrib1(AAtribIdAtrib1 node)
    {
        defaultIn(node);
    }

    public void outAAtribIdAtrib1(AAtribIdAtrib1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribIdAtrib1(AAtribIdAtrib1 node)
    {
        inAAtribIdAtrib1(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAAtribIdAtrib1(node);
    }

    public void inAAtribNumAtrib1(AAtribNumAtrib1 node)
    {
        defaultIn(node);
    }

    public void outAAtribNumAtrib1(AAtribNumAtrib1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribNumAtrib1(AAtribNumAtrib1 node)
    {
        inAAtribNumAtrib1(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outAAtribNumAtrib1(node);
    }

    public void inAAtribStrAtrib1(AAtribStrAtrib1 node)
    {
        defaultIn(node);
    }

    public void outAAtribStrAtrib1(AAtribStrAtrib1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribStrAtrib1(AAtribStrAtrib1 node)
    {
        inAAtribStrAtrib1(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAAtribStrAtrib1(node);
    }

    public void inAPSubAteParaSub(APSubAteParaSub node)
    {
        defaultIn(node);
    }

    public void outAPSubAteParaSub(APSubAteParaSub node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPSubAteParaSub(APSubAteParaSub node)
    {
        inAPSubAteParaSub(node);
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getNumeroInteiro() != null)
        {
            node.getNumeroInteiro().apply(this);
        }
        if(node.getParaSubPasso() != null)
        {
            node.getParaSubPasso().apply(this);
        }
        outAPSubAteParaSub(node);
    }

    public void inAPSubPasso1ParaSubPasso(APSubPasso1ParaSubPasso node)
    {
        defaultIn(node);
    }

    public void outAPSubPasso1ParaSubPasso(APSubPasso1ParaSubPasso node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPSubPasso1ParaSubPasso(APSubPasso1ParaSubPasso node)
    {
        inAPSubPasso1ParaSubPasso(node);
        if(node.getPasso() != null)
        {
            node.getPasso().apply(this);
        }
        if(node.getNumeroInteiro() != null)
        {
            node.getNumeroInteiro().apply(this);
        }
        if(node.getParaSubAte() != null)
        {
            node.getParaSubAte().apply(this);
        }
        outAPSubPasso1ParaSubPasso(node);
    }

    public void inAPSubPasso2ParaSubPasso(APSubPasso2ParaSubPasso node)
    {
        defaultIn(node);
    }

    public void outAPSubPasso2ParaSubPasso(APSubPasso2ParaSubPasso node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPSubPasso2ParaSubPasso(APSubPasso2ParaSubPasso node)
    {
        inAPSubPasso2ParaSubPasso(node);
        if(node.getParaSubAte() != null)
        {
            node.getParaSubAte().apply(this);
        }
        outAPSubPasso2ParaSubPasso(node);
    }

    public void inAPSubAteParaSubAte(APSubAteParaSubAte node)
    {
        defaultIn(node);
    }

    public void outAPSubAteParaSubAte(APSubAteParaSubAte node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPSubAteParaSubAte(APSubAteParaSubAte node)
    {
        inAPSubAteParaSubAte(node);
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getNumeroInteiro() != null)
        {
            node.getNumeroInteiro().apply(this);
        }
        outAPSubAteParaSubAte(node);
    }

    public void inAValorExpressao(AValorExpressao node)
    {
        defaultIn(node);
    }

    public void outAValorExpressao(AValorExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorExpressao(AValorExpressao node)
    {
        inAValorExpressao(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorExpressao(node);
    }

    public void inAExpIdExpressao(AExpIdExpressao node)
    {
        defaultIn(node);
    }

    public void outAExpIdExpressao(AExpIdExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpIdExpressao(AExpIdExpressao node)
    {
        inAExpIdExpressao(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAExpIdExpressao(node);
    }

    public void inAIgualdadeExpressaoLogica(AIgualdadeExpressaoLogica node)
    {
        defaultIn(node);
    }

    public void outAIgualdadeExpressaoLogica(AIgualdadeExpressaoLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualdadeExpressaoLogica(AIgualdadeExpressaoLogica node)
    {
        inAIgualdadeExpressaoLogica(node);
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outAIgualdadeExpressaoLogica(node);
    }
}
