/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import compilador.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAStartStart(AStartStart node);
    void caseAEsqueletoEsqueletoPrograma(AEsqueletoEsqueletoPrograma node);
    void caseADeclaracao(ADeclaracao node);
    void caseADeclaracaoParteDeclaracao(ADeclaracaoParteDeclaracao node);
    void caseADeclaracao2ParteDeclaracao(ADeclaracao2ParteDeclaracao node);
    void caseAAtribuicaoParteComandos(AAtribuicaoParteComandos node);
    void caseALeiaParteComandos(ALeiaParteComandos node);
    void caseAEscrevaParteComandos(AEscrevaParteComandos node);
    void caseACondicionalParteComandos(ACondicionalParteComandos node);
    void caseARepeticaoParteComandos(ARepeticaoParteComandos node);
    void caseAIfACondicional(AIfACondicional node);
    void caseACondSenao(ACondSenao node);
    void caseAEnquantoRepeticao(AEnquantoRepeticao node);
    void caseARepitaRepeticao(ARepitaRepeticao node);
    void caseAParaRepeticao(AParaRepeticao node);
    void caseAIdVirgulaIdVirgula(AIdVirgulaIdVirgula node);
    void caseAExpVirgulaExpVirgula(AExpVirgulaExpVirgula node);
    void caseAFpPvFimParaPontoVirgula(AFpPvFimParaPontoVirgula node);
    void caseAAtribIdAtrib1(AAtribIdAtrib1 node);
    void caseAAtribNumAtrib1(AAtribNumAtrib1 node);
    void caseAAtribStrAtrib1(AAtribStrAtrib1 node);
    void caseAPSubAteParaSub(APSubAteParaSub node);
    void caseAPSubPasso1ParaSubPasso(APSubPasso1ParaSubPasso node);
    void caseAPSubPasso2ParaSubPasso(APSubPasso2ParaSubPasso node);
    void caseAPSubAteParaSubAte(APSubAteParaSubAte node);
    void caseANumIntNumeroInteiro(ANumIntNumeroInteiro node);
    void caseANumRealNumeroReal(ANumRealNumeroReal node);
    void caseAV1Valor(AV1Valor node);
    void caseAV2Valor(AV2Valor node);
    void caseAV1Variavel(AV1Variavel node);
    void caseAV2Variavel(AV2Variavel node);
    void caseARealTipo(ARealTipo node);
    void caseAIntTipo(AIntTipo node);
    void caseACharTipo(ACharTipo node);
    void caseAMaisSoma(AMaisSoma node);
    void caseAMenosSoma(AMenosSoma node);
    void caseAMultMultiplicacao(AMultMultiplicacao node);
    void caseADivMultiplicacao(ADivMultiplicacao node);
    void caseAOpr1OpRelacional(AOpr1OpRelacional node);
    void caseAOpr2OpRelacional(AOpr2OpRelacional node);
    void caseAIgualOpRelacionalIgual(AIgualOpRelacionalIgual node);
    void caseADiferenteOpRelacionalIgual(ADiferenteOpRelacionalIgual node);
    void caseAMenorOpRelacionalComp(AMenorOpRelacionalComp node);
    void caseAMenorIgualOpRelacionalComp(AMenorIgualOpRelacionalComp node);
    void caseAMaiorOpRelacionalComp(AMaiorOpRelacionalComp node);
    void caseAMaiorIgualOpRelacionalComp(AMaiorIgualOpRelacionalComp node);
    void caseAEOpLogico(AEOpLogico node);
    void caseAOuOpLogico(AOuOpLogico node);
    void caseAXorOpLogico(AXorOpLogico node);
    void caseAOuOpLogicoOu(AOuOpLogicoOu node);
    void caseAXorOpLogicoOu(AXorOpLogicoOu node);
    void caseAExp1Expressao(AExp1Expressao node);
    void caseATermoExpressao(ATermoExpressao node);
    void caseATerm1Termo(ATerm1Termo node);
    void caseAFatorTermo(AFatorTermo node);
    void caseAFator1Fator(AFator1Fator node);
    void caseANumFator(ANumFator node);
    void caseAIdFator(AIdFator node);
    void caseAExpl1ExpressaoLogica(AExpl1ExpressaoLogica node);
    void caseAExpl2ExpressaoLogica(AExpl2ExpressaoLogica node);
    void caseATermol1TermoLog(ATermol1TermoLog node);
    void caseATermol2TermoLog(ATermol2TermoLog node);
    void caseAExpr1ExpRel(AExpr1ExpRel node);
    void caseAExpr2ExpRel(AExpr2ExpRel node);
    void caseATermor1TermoRel(ATermor1TermoRel node);
    void caseATermor2TermoRel(ATermor2TermoRel node);
    void caseAFr1FatorRel(AFr1FatorRel node);
    void caseAFr3FatorRel(AFr3FatorRel node);
    void caseAFr4FatorRel(AFr4FatorRel node);
    void caseAPParen(APParen node);

    void caseTCommentLine(TCommentLine node);
    void caseTComentBloco(TComentBloco node);
    void caseTUnderscore(TUnderscore node);
    void caseTNumero(TNumero node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTXor(TXor node);
    void caseTNao(TNao node);
    void caseTMais(TMais node);
    void caseTMenos(TMenos node);
    void caseTDivisao(TDivisao node);
    void caseTMult(TMult node);
    void caseTMenor(TMenor node);
    void caseTMenorIgual(TMenorIgual node);
    void caseTMaior(TMaior node);
    void caseTMaiorIgual(TMaiorIgual node);
    void caseTSeta(TSeta node);
    void caseTIgualIgual(TIgualIgual node);
    void caseTDiferente(TDiferente node);
    void caseTIgual(TIgual node);
    void caseTPontoEVirgula(TPontoEVirgula node);
    void caseTVirgula(TVirgula node);
    void caseTAbreParen(TAbreParen node);
    void caseTFechaParen(TFechaParen node);
    void caseTAbreColchete(TAbreColchete node);
    void caseTFechaColchete(TFechaColchete node);
    void caseTAbreChave(TAbreChave node);
    void caseTFechaChave(TFechaChave node);
    void caseTAbreComent(TAbreComent node);
    void caseTFechaComent(TFechaComent node);
    void caseTPonto(TPonto node);
    void caseTDoisPontos(TDoisPontos node);
    void caseTLeia(TLeia node);
    void caseTEscreva(TEscreva node);
    void caseTPrograma(TPrograma node);
    void caseTVar(TVar node);
    void caseTSe(TSe node);
    void caseTEntao(TEntao node);
    void caseTSenao(TSenao node);
    void caseTEnquanto(TEnquanto node);
    void caseTFaca(TFaca node);
    void caseTRepita(TRepita node);
    void caseTAte(TAte node);
    void caseTPara(TPara node);
    void caseTDe(TDe node);
    void caseTPasso(TPasso node);
    void caseTInicio(TInicio node);
    void caseTFimPonto(TFimPonto node);
    void caseTFimSe(TFimSe node);
    void caseTFimEnquanto(TFimEnquanto node);
    void caseTFimPara(TFimPara node);
    void caseTFim(TFim node);
    void caseTReal(TReal node);
    void caseTInteiro(TInteiro node);
    void caseTCaractere(TCaractere node);
    void caseTString(TString node);
    void caseTConst(TConst node);
    void caseTIdentificador(TIdentificador node);
    void caseTCharIgnored(TCharIgnored node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
