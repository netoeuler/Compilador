/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import compilador.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAStart(AStart node);
    void caseAEsqueletoPrograma(AEsqueletoPrograma node);
    void caseADeclaracaoVariavelParteDeclaracao(ADeclaracaoVariavelParteDeclaracao node);
    void caseADeclaracaoConstanteParteDeclaracao(ADeclaracaoConstanteParteDeclaracao node);
    void caseARealTipo(ARealTipo node);
    void caseAInteiroTipo(AInteiroTipo node);
    void caseACaractereTipo(ACaractereTipo node);
    void caseAAtribuicaoComandos(AAtribuicaoComandos node);
    void caseALeiaComandos(ALeiaComandos node);
    void caseAEscrevaComandos(AEscrevaComandos node);
    void caseACondicionalComandos(ACondicionalComandos node);
    void caseACondicionalSenaoComandos(ACondicionalSenaoComandos node);
    void caseAAvalieComandos(AAvalieComandos node);
    void caseAEnquantoComandos(AEnquantoComandos node);
    void caseARepitaComandos(ARepitaComandos node);
    void caseAParaComandos(AParaComandos node);
    void caseAParaPassoComandos(AParaPassoComandos node);
    void caseAIdIdVirgula(AIdIdVirgula node);
    void caseAIdvirgulaIdVirgula(AIdvirgulaIdVirgula node);
    void caseAExpVirgula(AExpVirgula node);
    void caseAAvalieCasoSub(AAvalieCasoSub node);
    void caseAAvalieSenao(AAvalieSenao node);
    void caseAStringValor(AStringValor node);
    void caseANumeroInteiroValor(ANumeroInteiroValor node);
    void caseANumeroRealValor(ANumeroRealValor node);
    void caseAIdentificadorVariavel(AIdentificadorVariavel node);
    void caseAVetorVariavel(AVetorVariavel node);
    void caseAMaisExpressao(AMaisExpressao node);
    void caseAMenosExpressao(AMenosExpressao node);
    void caseAMultExpressao(AMultExpressao node);
    void caseADivisaoExpressao(ADivisaoExpressao node);
    void caseAVariavelExpressao(AVariavelExpressao node);
    void caseAValorExpressao(AValorExpressao node);
    void caseAOuExpressaoLogica(AOuExpressaoLogica node);
    void caseAXorExpressaoLogica(AXorExpressaoLogica node);
    void caseAEExpressaoLogica(AEExpressaoLogica node);
    void caseAIgualExpressaoLogica(AIgualExpressaoLogica node);
    void caseADiferenteExpressaoLogica(ADiferenteExpressaoLogica node);
    void caseAMenorExpressaoLogica(AMenorExpressaoLogica node);
    void caseAMenorIgualExpressaoLogica(AMenorIgualExpressaoLogica node);
    void caseAMaiorExpressaoLogica(AMaiorExpressaoLogica node);
    void caseAMaiorIgualExpressaoLogica(AMaiorIgualExpressaoLogica node);

    void caseTComentarioLinha(TComentarioLinha node);
    void caseTComentarioBloco(TComentarioBloco node);
    void caseTUnderscore(TUnderscore node);
    void caseTNumeroReal(TNumeroReal node);
    void caseTNumeroInteiro(TNumeroInteiro node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTXor(TXor node);
    void caseTNao(TNao node);
    void caseTMais(TMais node);
    void caseTMenos(TMenos node);
    void caseTDivisao(TDivisao node);
    void caseTMult(TMult node);
    void caseTMenor(TMenor node);
    void caseTMenorIgual(TMenorIgual node);
    void caseTMaior(TMaior node);
    void caseTMaiorIgual(TMaiorIgual node);
    void caseTSeta(TSeta node);
    void caseTIgualIgual(TIgualIgual node);
    void caseTDiferente(TDiferente node);
    void caseTIgual(TIgual node);
    void caseTPontoEVirgula(TPontoEVirgula node);
    void caseTVirgula(TVirgula node);
    void caseTAbreParen(TAbreParen node);
    void caseTFechaParen(TFechaParen node);
    void caseTAbreColchete(TAbreColchete node);
    void caseTFechaColchete(TFechaColchete node);
    void caseTAbreChave(TAbreChave node);
    void caseTFechaChave(TFechaChave node);
    void caseTAbreComent(TAbreComent node);
    void caseTFechaComent(TFechaComent node);
    void caseTPonto(TPonto node);
    void caseTDoisPontos(TDoisPontos node);
    void caseTLeia(TLeia node);
    void caseTEscreva(TEscreva node);
    void caseTPrograma(TPrograma node);
    void caseTVar(TVar node);
    void caseTSe(TSe node);
    void caseTEntao(TEntao node);
    void caseTSenao(TSenao node);
    void caseTEnquanto(TEnquanto node);
    void caseTFaca(TFaca node);
    void caseTRepita(TRepita node);
    void caseTAte(TAte node);
    void caseTPara(TPara node);
    void caseTDe(TDe node);
    void caseTPasso(TPasso node);
    void caseTAvalie(TAvalie node);
    void caseTCaso(TCaso node);
    void caseTInicio(TInicio node);
    void caseTFimPonto(TFimPonto node);
    void caseTFimSe(TFimSe node);
    void caseTFimEnquanto(TFimEnquanto node);
    void caseTFimPara(TFimPara node);
    void caseTFimAvalie(TFimAvalie node);
    void caseTFim(TFim node);
    void caseTReal(TReal node);
    void caseTInteiro(TInteiro node);
    void caseTCaractere(TCaractere node);
    void caseTString(TString node);
    void caseTConst(TConst node);
    void caseTIdentificador(TIdentificador node);
    void caseTCharIgnored(TCharIgnored node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
