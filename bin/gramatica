Package compilador;
 
Helpers     
    charmin = ['a' .. 'z']+;
    charmai = ['A' .. 'Z']+;
    char = [['a'..'z'] + ['A'..'Z']];
    digito = ['0' .. '9']+;
    qualquer_char = [0x0 .. 0xffff];
    
    hunderscore = '_';
    hponto = '.';
    
    cr = 13 ;
    lf = 10 ;
    tab = 9 ;
    blank = ' ';
    hchar_ignored = cr|lf|blank|tab|'\n';
    nao_cr_lf = [qualquer_char - [13 + 10]];
    nao_estrela = [qualquer_char - '*'];
    nao_estrela_barra = [nao_estrela - '/'];
    hstring = ''' [nao_cr_lf - ''']+ ''';
 
Tokens
    comment_line = '//' [qualquer_char - 10]* hchar_ignored*;
    coment_bloco = '/*' nao_estrela* '*'+ (nao_estrela_barra nao_estrela* '*'+)* '/';
    
    underscore = hunderscore;
    numero = digito+;  
        
    e = 'e';
    ou = 'ou';
    xor = 'xor';
    nao = 'nao';
    
    mais = '+';
    menos = '-';
    divisao = '/';
    mult = '*';    
    
    menor = '<';
    menor_igual = '<=';
    maior = '>';
    maior_igual = '>=';
    
    seta = '<-';
    igual_igual = '==';
    diferente = '<>';
    igual = '=';    
 
    ponto_e_virgula = ';';
    virgula = ',';
    abre_paren = '(' ;
    fecha_paren = ')' ;
    abre_colchete = '[' ;
    fecha_colchete = ']' ;
    abre_chave = '{' ;
    fecha_chave = '}' ;
    abre_coment = '/*' ;
    fecha_coment = '*/' ;
    ponto = '.';
    dois_pontos = ':';
    
    leia = 'leia';
    escreva = 'escreva';
    programa = 'programa';
    var = 'var';
    se = 'se';
    entao = 'entao';
    senao = 'senao';
    enquanto = 'enquanto';    
    faca = 'faca';
    repita = 'repita';
    ate = 'ate';
    para = 'para';
    de = 'de';
    passo = 'passo';
    inicio = 'inicio';
    fim_ponto = 'fim.';
    fim_se = 'fim' hchar_ignored+ 'se';    
    fim_enquanto = 'fim' hchar_ignored+ 'enquanto';
    fim_para = 'fim para';
    fim = 'fim';
    
    real = 'real';
    inteiro = 'inteiro';
    caractere = 'caractere';
    
    string = hstring;
//    valor = hstring | digito+;
    
    const = 'const';
    identificador = (hunderscore | char) (char | digito | hunderscore)*;
    char_ignored = hchar_ignored;
    
Ignored Tokens
    char_ignored, comment_line;
    
Productions
    start = {start} esqueleto_programa;
    esqueleto_programa = {esqueleto} programa identificador ponto_e_virgula declaracao? inicio parte_comandos+ fim_ponto;
    
    declaracao = parte_declaracao+;
    parte_declaracao = {declaracao} var tipo dois_pontos id_virgula? identificador ponto_e_virgula
    					| {declaracao2} const identificador ponto_e_virgula;
    
    parte_comandos = {atribuicao} identificador seta atrib1 ponto_e_virgula
                    | {leia} leia abre_paren id_virgula identificador fecha_paren ponto_e_virgula
                    | {escreva} escreva abre_paren exp_virgula? expressao fecha_paren ponto_e_virgula
                    | {condicional} condicional
                    | {repeticao} repeticao;
    
    condicional = {if_a} se abre_paren expressao_logica fecha_paren entao  parte_comandos+ cond_senao? fim_se ponto_e_virgula;
    cond_senao = senao parte_comandos+;
    
    repeticao = {enquanto} enquanto abre_paren expressao_logica fecha_paren faca  parte_comandos+ fim_enquanto
            | {repita} repita  parte_comandos+ ate abre_paren expressao_logica fecha_paren ponto_e_virgula
            | {para} para identificador de numero_inteiro para_sub  parte_comandos+ fim_para ponto_e_virgula;
    
    id_virgula = {id_virgula} identificador virgula;
    exp_virgula = {exp_virgula} expressao virgula;
    fim_para_ponto_virgula = {fp_pv} fim_para ponto_e_virgula;
    atrib1 = {atrib_id} identificador | {atrib_num} numero | {atrib_str} string;
    para_sub = {p_sub_ate} ate numero_inteiro para_sub_passo;
    para_sub_passo = {p_sub_passo1} passo numero_inteiro para_sub_ate | {p_sub_passo2} para_sub_ate;
    para_sub_ate = {p_sub_ate} ate numero_inteiro;
    
    numero_inteiro = {num_int} numero;
    numero_real = {num_real} numero? virgula numero_inteiro+;
    //parte_frac = {p_frac} virgula numero_inteiro+;
    
    //valor = {v1} string | {v2} numero_inteiro | {v3} numero_real;
    valor = {v1} string | {v2} numero_inteiro;
    variavel = {v1} identificador | {v2} identificador abre_colchete numero_inteiro fecha_colchete;
     
    tipo = {real} real | {int} inteiro | {char} caractere;
    soma = {mais} mais | {menos} menos;
    multiplicacao = {mult} mult | {div} divisao;
    op_relacional = {opr1} op_relacional_igual | {opr2} op_relacional_comp; 
	op_relacional_igual = {igual} igual | {diferente} diferente;
	op_relacional_comp = {menor} menor | {menor_igual} menor_igual | {maior} maior | {maior_igual} maior_igual;
    op_logico = {e} e | {ou} ou | {xor} xor;
    op_logico_ou = {ou} ou | {xor} xor;
    
    expressao = {exp1} expressao soma termo | {termo} termo;
    termo = {term1} termo mult fator | {fator} fator;
    fator = {fator1} abre_paren expressao fecha_paren | {num} valor | {id} variavel;    
    
    expressao_logica = {expl1} expressao_logica op_logico_ou termo_log | {expl2} termo_log;
    termo_log = {termol1} termo_log e exp_rel | {termol2} exp_rel;
    exp_rel = {expr1} fator_rel op_relacional_igual termo_rel | {expr2} termo_rel;
    termo_rel = {termor1} termo_rel op_relacional_comp fator_rel | {termor2} fator_rel;
    fator_rel = {fr1} paren | {fr3} valor | {fr4} variavel;
    paren = {p} abre_paren expressao_logica fecha_paren;
    